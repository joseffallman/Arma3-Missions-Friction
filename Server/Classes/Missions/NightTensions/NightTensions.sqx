/*
 * Name:	NightTensions
 * Date:	2020-07-04
 * Version: 1.0
 * Author:  Engima
 */

using Mission.Common;

namespace Mission.Server
{
	public class NightTensions : Mission
	{
		private fields ["_mBox" as Object, "_mDrawingsAreStolen" as Boolean, "_mPrimaryObjectiveMarker" as String];
	
		// Creates a AsEasyAsItGets object.
		public constructor("_baseMarkersConfig" as IBaseMarkersConfig, "_actingSide" as Side)
		{
			[_baseMarkersConfig, _actingSide] call _base.Constructor;
			_mDrawingsAreStolen = false;
			_mBox = objNull;
		};
		
		protected override method InitMission("_mission" as MissionSettings)
		{
			_mission.Name = "Night Tensions";
			_mission.StartTimeOfDay = 0;
			_mission.StartMarkersActing = ["m06a_StartArea1", "m06a_StartArea2", "m06a_StartArea3"];
			_mission.StartMarkersOpposing = ["m06o_StartArea1"];
			_mission.SideMarkersActing = ["m06a_PrimaryObjective1", "m06a_PrimaryObjective2", "m06a_PrimaryObjective3"];
			_mission.AddReturnObjectiveForActing = true;
		};
		
		protected override method Setup()
		{
			_mPrimaryObjectiveMarker = selectRandom ["m06a_PrimaryObjective1", "m06a_PrimaryObjective2", "m06a_PrimaryObjective3"];
			_mPrimaryObjectiveMarker setMarkerDir random 360;
			
			_mBox = ["WOODEN BOX", MissionSide.Acting, _mPrimaryObjectiveMarker] call _self.CreateSideVehicleOnMarker;
			
			["ASSAULT BOAT", MissionSide.Acting, BaseMarker.Naval] call _self.CreateSideVehicleOnBaseMarker;
			
			// Add an AI group defending the area.
			
			private _guard = ["RIFLEMAN", MissionSide.Opposing, getMarkerPos "m06o_StartArea1"] call _self.CreateAiSoldierBySide;
			private _guardGroup = group _guard;
			["RIFLEMAN", MissionSide.Opposing, getMarkerPos "m06o_StartArea1", _guardGroup] call _self.CreateAiSoldierBySide;
			
			[_guardGroup, "m06o_StartArea1"] execVM "Engima\SearchPatrol\SearchPatrol.sqf";
			
			call _base.Setup;
		};
		
		protected override method String AddBriefingInfoForActing()
		{
			private _briefingText = "The military drawings are in a box in one of the buildings marked 1, 2 and 3.";
			
			if (HistoryToken.HawkIntel in _self.EarlierGainedTokensActing) then {
				_briefingText = "Earlier collected intel reveals that the drawings are in building no" + markerText _mPrimaryObjectiveMarker;
			};
			
			return _briefingText;
		};
		
		protected override method String AddBriefingInfoForOpposing()
		{
			return "An ordinary night at the airbase, but the threat of intruders breaking in and stealing materiel is always present.";
		};
		
		protected override method MissionObjective CreatePrimaryObjectiveForActing()
		{
			private _shortDescription = "Steal military drawings";
			private _longDescription = "Find the box with military drawings and steal them.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method MissionObjective CreatePrimaryObjectiveForOpposing()
		{
			private _shortDescription = "Prevent theft";
			private _longDescription = "Keep the airbase safe and prevent intruders from stealing anything.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method MissionObjective CreateSecondaryObjectiveForOpposing()
		{
			private _shortDescription = "Kill all intruders";
			private _longDescription = "Kill all intruders.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateActing()
		{
			private _fulfilled = ({ _x distance _mBox < 3 } count _self.ActingUnits > 0);
			
			if (_fulfilled) then {
				_mDrawingsAreStolen = true;
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateOpposing()
		{
			private _allEnemiesDead = call _self.CountUnitsAliveActing == 0;
			private _missionHasEnded = _self.RemainingTime == 0;
		
			if (_allEnemiesDead || (_missionHasEnded && !_mDrawingsAreStolen)) then {
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckSecondaryObjectiveStateOpposing()
		{
			private _allEnemiesDead = call _self.CountUnitsAliveActing == 0;
			if (_allEnemiesDead) then {
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
	};
};
