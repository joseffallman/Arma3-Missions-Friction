/*
 * Name:	Establishments
 * Date:	2020-07-04
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * An 'empty' but working mission - just to show that an empty class deriving from Mission really executes as a mission.
 */

using Mission.Common;
using Sqx.Markers;

namespace Mission.Server
{
	public class Establishments : Mission
	{
		private fields ["_mAmmoTruck" as Object, "_mMailBox" as Object, "_mExplosivesBox" as Object, "_mDeltaActingAreaMarker" as String, "_mDeltaOpposingAreaMarker" as String];
		private fields ["_mActingEnterDeltaAreaTime" as Scalar, "_mOpposingEnterDeltaAreaTime" as Scalar, "_mExplosivesBoxOwnerSide" as MissionSide];
	
		// Creates a AsEasyAsItGets object.
		public constructor("_baseMarkersConfig" as IBaseMarkersConfig, "_actingSide" as Side)
		{
			[_baseMarkersConfig, _actingSide] call _base.Constructor;
			
			_mActingEnterDeltaAreaTime = -1;
			_mOpposingEnterDeltaAreaTime = -1;
			_mExplosivesBoxOwnerSide = MissionSide.Guerilla;
		};
		
		protected override method InitMission("_mission" as MissionSettings)
		{
			_mission.Name = "Establishments";
			_mission.StartTimeOfDay = 7;
			
			_mission.SideMarkersActing = ["m07a_LimeriBay", "m07a_PointDelta"];
			_mission.SideMarkersOpposing = ["m07o_MilitaryRange", "m07o_PointDelta"];
			
			// Move delta markers to random fishy places
			_mDeltaActingAreaMarker = selectRandom ["m_FishyPlaceCamoArea", "m_FishyPlaceCampingArea", "m_FishyPlaceRustyArea"];
			"m07a_PointDelta" setMarkerPos getMarkerPos _mDeltaActingAreaMarker;
			
			_mDeltaOpposingAreaMarker = selectRandom ["m_FishyPlaceCamoArea", "m_FishyPlaceCampingArea", "m_FishyPlaceRustyArea"];
			"m07o_PointDelta" setMarkerPos getMarkerPos _mDeltaOpposingAreaMarker;
		};
		
		protected override method String AddBriefingInfoForActing()
		{
			return "Deliver supplies to Delta Bravo 4 at Limeri Bay and check the surroundings. Stay aware and report any spotted enemy or guerilla movements.";
		};
		
		protected override method String AddBriefingInfoForOpposing()
		{
			return "Reach Alpha Charlie 2 at Agia Marina's military range to get the mail, and check the surroundings. Stay aware and report any spotted enemy or guerilla movements.";
		};
		
		protected override method MissionObjective CreatePrimaryObjectiveForActing()
		{
			private _shortDescription = "Deliver supplies";
			private _longDescription = "Drive the truck to Limeri Bay and park it among the other vehicles there.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method MissionObjective CreateSecondaryObjectiveForActing()
		{
			private _shortDescription = "Investigate Point Delta";
			private _longDescription = "Alpha Six have reported seing something at Point Delta. Go there and spend some time to investigate the area. But be aware, enemy units have also been spotted in the vincinity.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method MissionObjective CreatePrimaryObjectiveForOpposing()
		{
			private _shortDescription = "Get the mail";
			private _longDescription = "Go to Agia Marina's military range. Find the pallet with the brigade's mail, and check if there is anything for us.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method MissionObjective CreateSecondaryObjectiveForOpposing()
		{
			private _shortDescription = "Investigate Point Delta";
			private _longDescription = "Alpha Six have reported seing something at Point Delta. Go there and spend some time to investigate the area. But be aware, enemy units have also been spotted in the vincinity.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method Setup()
		{
			// Select a random fishy plase to populate with guerillas.
			private _populatedFishyPlaceMarker = selectRandom ["m_FishyPlaceCamoArea", "m_FishyPlaceCampingArea", "m_FishyPlaceRustyArea"];
			
			// Spawn guereillas at the selected fishy place and make them patrol
			private _guard = ["RIFLEMAN", MissionSide.Guerilla, getMarkerPos _populatedFishyPlaceMarker] call _self.CreateAiSoldierBySide;
			private _guardGroup = group _guard;
			["RIFLEMAN", MissionSide.Guerilla, getMarkerPos _populatedFishyPlaceMarker, _guardGroup] call _self.CreateAiSoldierBySide;
			[_guardGroup, _populatedFishyPlaceMarker] execVM "Engima\SearchPatrol\SearchPatrol.sqf";
			
			// Spawn an ammo truck and vehicles in the acting base
			_mAmmoTruck = ["AMMO TRUCK", MissionSide.Acting, BaseMarker.LandVehicles, true] call _self.CreateSideVehicleOnBaseMarker;
			["MRAP", MissionSide.Acting, BaseMarker.LandVehicles, true] call _self.CreateSideVehicleOnBaseMarker;
			["QUADBIKE", MissionSide.Acting, BaseMarker.LandVehicles, true] call _self.CreateSideVehicleOnBaseMarker;
			
			// Spawn vehicles in the opposing base
			["MRAP", MissionSide.Opposing, BaseMarker.LandVehicles, true] call _self.CreateSideVehicleOnBaseMarker;
			["QUADBIKE", MissionSide.Opposing, BaseMarker.LandVehicles, true] call _self.CreateSideVehicleOnBaseMarker;
			
			// Create mail box at Military Range
			private _mailBoxPosition = ["m_MilitaryRangeArea"] call MarkerHelper.GetRandomPosInsideMarker;
			private _mailBoxMarker = createMarkerLocal ["temp_marker_mailbox", _mailBoxPosition];
			_mMailBox = ["CLOSED PAPERBOX", MissionSide.Opposing, _mailBoxMarker] call _self.CreateSideVehicleOnMarker;
			
			// Create vehicles at Limeri Bay
			["MRAP", MissionSide.Acting, "m07a_LimeriBayMrap"] call _self.CreateSideVehicleOnMarker;
			["QUADBIKE", MissionSide.Acting, "m07a_LimeriBayQuadBike"] call _self.CreateSideVehicleOnMarker;
			
			// Create AAF Explosives box that may be found at point Delta
			private _explosivesBoxAreaMarker = selectRandom [_mDeltaActingAreaMarker, _mDeltaOpposingAreaMarker];
			
			_mExplosivesBox = ["AMMOBOX ORDNANCE", [_explosivesBoxAreaMarker] call MarkerHelper.GetRandomPosInsideMarker, random 360] call _self.CreateVehicleOnPosition;
			
			call _base.Setup;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateActing()
		{
			private _fulfilled = (getPos _mAmmoTruck) inArea "m_LimeriBayArea" && (count crew _mAmmoTruck) == 0;
			
			if (_fulfilled) then {
				_mAmmoTruck lock true;
				_self.GainedTokenActing = HistoryToken.Uav;
			};
			
			if (_fulfilled) then {
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckSecondaryObjectiveStateActing()
		{
			// Fulfilled when units on the acting side has been inside delta area for more than one minute.
			
			private _insideArea = { alive _x && { _x inArea _mDeltaActingAreaMarker }} count _self.ActingUnits > 0;
			private _beenThereOneMinue = _mActingEnterDeltaAreaTime > 0 && time > _mActingEnterDeltaAreaTime + 60;
			
			if (_insideArea && _beenThereOneMinue) then {
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		private method Boolean AtLeastOneOpposingOutsideVehicleNearBox()
		{
			{
				if (alive _x && vehicle _x == _x && _x distance _mMailBox < 3) then
				{
					return true;
				};
			} foreach _self.OpposingUnits as Object;
			
			return false;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateOpposing()
		{
			if (call _self.AtLeastOneOpposingOutsideVehicleNearBox) then {
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckSecondaryObjectiveStateOpposing()
		{
			// Fulfilled when units on the opposing side has been inside delta area for more than one minute.
			
			private _insideArea = { alive _x && { _x inArea _mDeltaOpposingAreaMarker }} count _self.OpposingUnits > 0;
			private _beenThereOneMinue = _mOpposingEnterDeltaAreaTime > 0 && time > _mOpposingEnterDeltaAreaTime + 60;
			
			if (_insideArea && _beenThereOneMinue) then {
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		private method GroupInsideDeltaArea("_missionSide" as MissionSide)
		{
			if (_missionSide == MissionSide.Acting) then {
				return { alive _x && { _x inArea _mDeltaActingAreaMarker }} count _self.ActingUnits > 0;
			}
			else {
				return { alive _x && { _x inArea _mDeltaOpposingAreaMarker }} count _self.OpposingUnits > 0;
			};
		};
		
		protected override method OnEachIteration()
		{
			if ([MissionSide.Acting] call _self.GroupInsideDeltaArea) then {
				if (_mActingEnterDeltaAreaTime < 0) then {
					_mActingEnterDeltaAreaTime = time;
				};
			}
			else {
				_mActingEnterDeltaAreaTime = -1;
			};
			
			if ([MissionSide.Opposing] call _self.GroupInsideDeltaArea) then {
				if (_mOpposingEnterDeltaAreaTime < 0) then {
					_mOpposingEnterDeltaAreaTime = time;
				};
			}
			else {
				_mOpposingEnterDeltaAreaTime = -1;
			};
			
			// Check of someone finds the explosives box
			
			if (_mExplosivesBoxOwnerSide == MissionSide.Guerilla) then {
				if ({ vehicle _x == _x && _x distance _mExplosivesBox < 3 } count _self.ActingUnits > 0) then {
					_mExplosivesBoxOwnerSide = MissionSide.Acting;
					_mExplosivesBox setPos [0, 0, 0]; // Will be deleted in the Cleanup phase
					_self.GainedTokenActing = HistoryToken.Explosives;
					[MissionSide.Acting, "Found a box of explosives."] call _self.ShowNotification;
				};
			};
			
			if (_mExplosivesBoxOwnerSide == MissionSide.Guerilla) then {
				if ({ vehicle _x == _x && _x distance _mExplosivesBox < 3 } count _self.OpposingUnits > 0) then {
					_mExplosivesBoxOwnerSide = MissionSide.Opposing;
					_mExplosivesBox setPos [0, 0, 0]; // Will be deleted in the Cleanup phase
					_self.GainedTokenActing = HistoryToken.Explosives;
					[MissionSide.Opposing, "Found a box of explosives."] call _self.ShowNotification;
				};
			};
		};
		
		public override method Cleanup()
		{
			deleteMarkerLocal "temp_marker_mailbox";
			call _base.Cleanup;
		};
	};
};
